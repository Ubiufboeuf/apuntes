---
import { getMateriaByLink, getSeccionByMateriaLink, getSeccionNameByLink, nameToLink } from '@/lib/utils'
import { IconMenu, IconArrowRight } from './Icons'
import Crumb from '@/components/Crumb.astro'

export const prerender = false
const { url } = Astro
const { pathname } = url
const path = (pathname !== '/') ? pathname.split('/').slice(1) : ['']
let crumb = ''
const reservedPaths = [
  { sp: '', path: '404', msg: 'No se encontr칩 la p치gina buscada' },
  { sp: '', path: '400', msg: 'Mala formulaci칩n de la url' },
  { sp: '', path: 'editor', msg: url.searchParams.get('title') ?? 'Editor' },
  { sp: '', path: 'borrar', msg: url.searchParams.get('title') ?? 'Borrar notas' },
  { sp: '', path: 'renombrar', msg: url.searchParams.get('title') ?? 'Editar notas' },
]
---
<header class='h-header bg-secondary w-full grid grid-cols-[1fr_60px] lg:flex items-center gap-4 border-b-border-color border-b-[1px] border-solid px-4'>
  <div class='w-full flex-1 flex items-center justify-start overflow-x-auto [scrollbar-width:none] text-secondary-content text-sm px-2'>
    {
      path.map(async (part, idx) => {
        if (part === '') return
        let nombre
        const rp = reservedPaths.find(p => p.path.includes(path[0]))
        if (idx === 0) nombre = getSeccionNameByLink(part) || (rp?.msg || 'Secci칩n')
        if (idx === 1) nombre = getMateriaByLink(part) || 'Materia'
        if (idx === 2) nombre = decodeURIComponent(part) || 'Nota sin nombre'
        crumb += `/${path[idx]}`
        if (rp) {
          if (rp.path === '400') rp.sp = Astro.url.href
          if (
            rp.path === 'editor' ||
            rp.path === 'borrar' ||
            rp.path === 'renombrar'
          ) rp.sp = `${nameToLink(getSeccionByMateriaLink(nameToLink(url.searchParams.get('materiaName') || '')) || '')}/${nameToLink(url.searchParams.get('materiaName') || '')}`
        }
        return idx === 0 ? (
            <Crumb link={rp ? rp.sp : crumb} title={nombre}>{nombre}</Crumb>
          ) : (
            <div class='size-3.5 flex items-center justify-center'>
              <IconArrowRight />
            </div>
            <Crumb link={crumb} title={nombre}>{nombre}</Crumb>
          )
      })
    }
  </div>
  <label id='toggle-sidebar' for='checkbox-toggle-sidebar' class='h-full w-full flex aspect-square items-center justify-center hover:bg-tertiary rounded-lg cursor-pointer lg:hidden'>
    <div class='size-6 flex items-center justify-center text-primary-content'>
      <IconMenu />
    </div>
  </label>
</header>