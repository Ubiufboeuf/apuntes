---
import Footer from '@/components/Footer.astro'
import Layout from './Layout.astro'
import React from 'react'
import { getMateriaByPath, getMateriaByLink } from '@/lib/utils'
import { getNotaById, getNotaContent } from '@/db/client'
import { Editor as ClientEditor } from '@/components/Editor'

const path = Astro.url.pathname.split('/').slice(1)
const title = Number(path[2]) ? 'Nota sin nombre' : decodeURIComponent(path[2])
const materiaName = getMateriaByLink(path[1]) ?? ''
// const nota = Number(path[2]) ? findNotaByMateriaLinkAndNotaId({ materiaLink: path[1], notaId: Number(path[2]) }) : findNotaByMateriaLinkAndNotaLink({ materiaLink: path[1], notaLink: path[2] })
const nota = await getNotaById(Astro.url.pathname)

const notas = [nota]
const noteIdx = notas?.findIndex(n => n === nota) ?? 0
const materia = getMateriaByPath(Astro.url.pathname)

const content = await getNotaContent({ materiaName: materia.nombre || '', notaName: decodeURIComponent(path[2]) })

const prev = (notas?.[noteIdx - 1]?.id) ? {
  id: notas?.[noteIdx - 1].id,
  name: notas?.[noteIdx - 1].nombre,
  link: notas?.[noteIdx - 1]?.link ?? notas?.[noteIdx - 1].id
} : {
  name: materia.nombre,
  link: materia.link
}
prev.name ||= 'Nota sin nombre'
prev.link ||= prev.id?.toString() || prev.link

const next = (notas?.[noteIdx + 1]?.id) ? {
  id: notas?.[noteIdx + 1].id,
  name: notas?.[noteIdx + 1].nombre,
  link: notas?.[noteIdx + 1]?.link ?? notas?.[noteIdx - 1].id
} : {
  name: materia.nombre,
  link: materia.link
}
next.name ||= 'Nota sin nombre'
next.link ||= next.id?.toString() || prev.link
console.log(content)
---

<Layout title={title}>
  <ClientEditor
    initialContent={content}
    materiaName={materiaName}
    notaName={nota}
    client:only='react'
  />
  <!-- <Footer
    slot='footer'
    lastUpdate={parseStringToDate(nota?.lastModified)}
    prev={prev}
    next={next}
  /> -->
</Layout>